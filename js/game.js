function StartGame() {		let map = initMap();		let vertexBuffer = gl.createBuffer();	gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);		let vertexArray = [		-1.0,  0.0 , 0.0, 1.0, 0.0, 0.0,		-0.5, -0.87, 0.0, 1.0, 0.0, 0.0,		 0.5, -0.87, 0.0, 1.0, 0.0, 0.0,		 1.0,  0.0 , 0.0, 1.0, 0.0, 0.0,		 0.5,  0.87, 0.0, 1.0, 0.0, 0.0,		-0.5,  0.87, 0.0, 1.0, 0.0, 0.0,				-1.0,  0.0 , 0.0, 0.0, 0.0, 1.0,		-1.0,  0.0 , 3.0, 0.0, 0.0, 1.0,		-0.5, -0.87, 0.0, 0.0, 0.0, 1.0,		-0.5, -0.87, 3.0, 0.0, 0.0, 1.0,		0.5, -0.87, 0.0, 0.0, 0.0, 1.0,		0.5, -0.87, 3.0, 0.0, 0.0, 1.0,		1.0,  0.0 , 0.0, 0.0, 0.0, 1.0,		1.0,  0.0 , 3.0, 0.0, 0.0, 1.0,		0.5,  0.87, 0.0, 0.0, 0.0, 1.0,		0.5,  0.87, 3.0, 0.0, 0.0, 1.0,		-0.5,  0.87, 0.0, 0.0, 0.0, 1.0,		-0.5,  0.87, 3.0, 0.0, 0.0, 1.0,		-1.0,  0.0 , 0.0, 0.0, 0.0, 1.0,		-1.0,  0.0 , 3.0, 0.0, 0.0, 1.0	];		gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexArray), gl.STATIC_DRAW);	let positionAttribLocation = gl.getAttribLocation(program, 'vertexPosition');	gl.vertexAttribPointer(		positionAttribLocation,		3,		gl.FLOAT,		gl.FALSE,		6 * 4,		0	);	gl.enableVertexAttribArray(positionAttribLocation);		let colorAttribLocation = gl.getAttribLocation(program, 'vertexColor');	gl.vertexAttribPointer(		colorAttribLocation,		3,		gl.FLOAT,		gl.FALSE,		6 * 4,		3 * 4	);	gl.enableVertexAttribArray(colorAttribLocation);		let screenRatio = gl.getUniformLocation(program, "screenRatio"),		rot = gl.getUniformLocation(program, "rot"),		offset = gl.getUniformLocation(program, "offset");	gl.enable(gl.DEPTH_TEST);	gl.useProgram(program);		gl.uniform1f(screenRatio, canvas.height / canvas.width);	let alphax = -3.14/3, alphaz = 0, x, z, mdown = false;		document.addEventListener("mousedown", (event) => {		z = event.clientX;		//x = event.clientY;		mdown = true;	});	document.addEventListener("mouseup", (event) => {		mdown = false;			})	document.addEventListener("mousemove", (event) => {		if (mdown) {			//alphax += (x - event.clientY) / 314;			//x = event.clientY;			//if(alphax > 3.14) alphax -= 6.28;			//if(alphax < -3.14) alphax += 6.28;						alphaz += (z - event.clientX) / 314;			z = event.clientX;			if(alphaz > 3.14) alphaz -= 6.28;			if(alphaz < -3.14) alphaz += 6.28;		}	});		document.addEventListener("touchstart", (event) => {		z = event.touches[0].clientX;		x = event.touches[0].clientY;	});	document.addEventListener("touchmove", (event) => {		alphax += (x - event.touches[0].clientY) / 314;		x = event.touches[0].clientY;		if(alphax > 3.14) alphax -= 3.14;		if(alphax < -3.14) alphax += 3.14;				alphaz += (z - event.touches[0].clientX) / 314;		z = event.touches[0].clientX;		if(alphaz > 3.14) alphaz -= 3.14;		if(alphaz < -3.14) alphax += 3.14;	});		setInterval(() => {		gl.clearColor(0.0, 0.0, 0.0, 1.0);		gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);				gl.uniform3fv(rot, [alphax, 0, alphaz]);				for (let ox = -4, x = 0; ox < 4; ox += 3) {		for (let oy = -4, y = 0; oy < 4; oy += 2 * 0.87) {			gl.uniform3fv(offset, [ox, oy, -map[x][y]]);			gl.drawArrays(gl.TRIANGLE_FAN, 0, 6);			y++;		}		x++;		}				for (let ox = -4 + 1.5, x = 0; ox < 4; ox += 3) {		for (let oy = -4 + 0.87, y = 0; oy < 4; oy += 2 * 0.87) {			gl.uniform3fv(offset, [ox, oy, -map[x][y]]);			gl.drawArrays(gl.TRIANGLE_FAN, 0, 6);			y++;		}		x++;		}				for (let ox = -4, x = 0; ox < 4; ox += 3) {		for (let oy = -4, y = 0; oy < 4; oy += 2 * 0.87) {			gl.uniform3fv(offset, [ox, oy, -map[x][y]]);			gl.drawArrays(gl.TRIANGLE_STRIP, 6, 14);			y++;		}		x++;		}				for (let ox = -4 + 1.5, x = 0; ox < 4; ox += 3) {		for (let oy = -4 + 0.87, y = 0; oy < 4; oy += 2 * 0.87) {			gl.uniform3fv(offset, [ox, oy, -map[x][y]]);			gl.drawArrays(gl.TRIANGLE_STRIP, 6, 14);			y++;		}		x++;		}			}, 20);}